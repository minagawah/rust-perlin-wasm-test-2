[package]
name = "wasm-noise"
version = "0.1.0"
authors = ["Hiroki Minagawa <minagawah@tokyo800.jp>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "^0.2"
noise = "0.5.1"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
# (must be placed AFTER `wee_alloc` and `console_error_panic_hook`)
[dependencies.web-sys]
version = "0.3.22"
features = ["console"]

# These crates are used for running unit tests.
[dev-dependencies]
wasm-bindgen-test = "^0.2"
futures = "0.1.27"
js-sys = "0.3.22"
wasm-bindgen-futures = "0.3.22"

[profile.dev]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode (link-time-optimization).
lto = true
# We want performance rather than file size.
opt-level = 3

[profile.release]
##### Tell `rustc` to optimize for small code size.
#####opt-level = "s"
# go for performance
opt-level = 3
lto = true
